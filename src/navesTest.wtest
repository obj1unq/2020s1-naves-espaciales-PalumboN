import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveLlena.carga())
	}
	
	test "acercamiento a control de nave en falta" {
		naveLlena.acercamientoDeControl()
		assert.equals(0, naveLlena.carga())
	}
	
	test "acercamiento a control de nave en regla" {
		naveLlena.carga(100)
		naveLlena.acercamientoDeControl()
		assert.equals(100, naveLlena.carga())
	}
	
	test "propulsarse sin velocidad" {
		naveVacia.propulsar()
		assert.equals(20000, naveVacia.velocidad())
	}

}

describe "Nave de residuos radioactivos" {
	const naveDeResiduosEnFalta = new NaveDeResiduosRadioactivos(carga = 100001, velocidad = 100001)
	const naveDeResiduos = new NaveDeResiduosRadioactivos(carga = 5000, velocidad = 10000, selladoAlVacio = true)
	const naveDetenida = new NaveDeResiduosRadioactivos(selladoAlVacio = false)

	test "al recibir amenaza frena" {
		naveDeResiduos.recibirAmenaza()
		assert.equals(0, naveDeResiduos.velocidad())
		assert.equals(5000, naveDeResiduos.carga())
	}
	
	test "acercamiento de control" {
		naveDeResiduosEnFalta.acercamientoDeControl()
		assert.equals(0, naveDeResiduosEnFalta.velocidad())
		assert.equals(100001, naveDeResiduosEnFalta.carga())
	}
	
	test "se prepara para viajar" {
		naveDetenida.prepararParaViajar()
		assert.equals(15000, naveDetenida.velocidad())
		assert.that(naveDetenida.selladoAlVacio())
	}
}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}
	
	test "propulsarse yendo al limite" {
		naveConPasajeros.propulsar()
		assert.equals(300000, naveConPasajeros.velocidad())
	}
	
	test "prepararse para viajar yendo al limite" {
		naveConPasajeros.prepararParaViajar()
		assert.equals(300000, naveConPasajeros.velocidad())
	}

}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}
	
	test "prepararse para viajar en ataque" {
		naveEnAtaque.prepararParaViajar()
		assert.equals("Volviendo a la base", naveEnAtaque.ultimoMensaje())	
		assert.equals(15000, naveEnAtaque.velocidad())	
	}
	
	test "prepararse para viajar en reposo" {
		naveEnReposo.prepararParaViajar()
		assert.equals("Saliendo en misión", naveEnReposo.ultimoMensaje())	
		assert.equals(15000, naveEnReposo.velocidad())
		assert.equals(ataque, naveEnReposo.modo())
	}
}

